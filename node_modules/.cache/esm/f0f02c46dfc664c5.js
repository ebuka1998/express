let validateBlog,Blog,pick;_dfc‍.x([["default",()=>_dfc‍.o]]);_dfc‍.w("./blog.model",[["validateBlog",["validateBlog"],function(v){validateBlog=v}],["Blog",["Blog"],function(v){Blog=v}]]);_dfc‍.w("lodash.pick",[["default",["pick"],function(v){pick=v}]]);


const blogController = {

    async createBlog (req, res)  {
        const { error } = validateBlog(req.body)
        if(error) {
            return res.status(400).send( error.details[0].message )
        }

        //creating the blog
        let blog = new Blog(pick(req.body, ['title', 'body', 'createdBy']))

        try {
            await blog.save()
            res.status(201).send(blog)
        } catch (error) {
            res.status(400).send(error)
        }
    },

    async getBlogs (req, res) {
        try {
            const result = await Blog.find().sort('createdAt')
            res.status(200).send(result)
        } catch (error) {
            res.status(400).send(error)
        }
    }









}


_dfc‍.d(blogController);