let mongoose,Joi,pick;_348‍.x([["Blog",()=>Blog],["validateBlog",()=>validateBlog]]);_348‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_348‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_348‍.w("lodash.pick",[["default",["pick"],function(v){pick=v}]]);




const schema = {

    title: { type: String, required: true },

    body:  { type: String, required: true },

    createdBy:  { type: String },

    createdAt: { type: Date, default: Date.now() },

    likes: { type: Number, default: 0 },

    likedBy: { type: Array },

    dislikes: { type: Number, default: 0 },

    dislikedBy: { type: Array },

    comments: [
        {
            comment: { type: String },
            
            commentator: { type: String }
        }
    ]


}


const blogSchema = new mongoose.Schema(schema, { timestamps: true })


/* choosing what I want to send back to the backend * */
blogSchema.methods.toJSON = function () {
    let blogObject = this.toObject()
    return blogObject = pick(blogObject, ['_id', 'title', 'body', 'createdBy'])
}


       const Blog = mongoose.model('blog', blogSchema)

/**validation */
       function validateBlog(data) {
    const schema = Joi.object().keys({
        title: Joi.string().required().label('you must provide a title'),
        body: Joi.string().required().label('you must provide body'),
        createdBy: Joi.string().required().label('login first'),
    })
    return Joi.validate(data, schema)
}